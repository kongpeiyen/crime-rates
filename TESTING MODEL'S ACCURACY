# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')

#Installing pmdarima package
get_ipython().system(' pip install pmdarima')

# Importing auto_arima 
from pmdarima.arima import auto_arima

#Read the crime dataset 
data2019 = pd.read_csv('/content/data/testing .csv')
dataset_accuracy = data2019.tail(12)

#Convert the month column to datetime and set the index of the Month  
data2019['MONTH']=pd.to_datetime(data2019['MONTH'])
data2019.set_index('MONTH',inplace=True) 

#Testing for stationarity --> it should say 'False'
from pmdarima.arima import ADFTest
adf_test = ADFTest(alpha = 0.05)
adf_test.should_diff(data2019)

#Spliting the dataset into train and test 
train = data2019['01 2015': '01 2019']
test = data2019['01 2019': '01 2020'] 

#Building ARIMA model 
arima_model =  auto_arima(train,start_p=0, d=1, start_q=0, 
                          max_p=5, max_d=5, max_q=5, start_P=0, 
                          D=1, start_Q=0, max_P=5, max_D=5,
                          max_Q=5, m=12, seasonal=True, 
                          error_action='warn',trace = True,
                          supress_warnings=True,stepwise = True,
                          random_state=20,n_fits = 50 )
arima_model.summary()

#Finding predicted crime values
prediction2019 = pd.DataFrame(arima_model.predict(n_periods = 12),index=test.index)
prediction2019.columns = ['predicted_burglaries']
prediction2019

#Finding prediction interval as an array
conf_int2019  = arima_model.predict(12,return_conf_int=True,alpha=0.05)
print(conf_int2019)

#save prediction interval array as csv file
from numpy import asarray
from numpy import savetxt
#define interval
interval2019 = asarray('conf_int2019')
# save to csv file
savetxt('interval2019.csv', interval, delimiter=',')

#add columns name
import pandas as pd
df = pd.read_csv('interval2019.csv', header=None)
df.rename(columns={0: 'min', 1: 'max'}, inplace=True)
df.to_csv('interval_with_col2019.csv', index=False) 

#Importing necessary libraries and see the table
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')
interval2019 = pd.read_csv('/content/interval_with_col2019.csv')
interval2019.head()

#Create month column
import pandas as pd
dates = pd.DataFrame({'MONTH':['01 2019','02 2019','03 2019','04 2019','05 2019','06 2019','07 2019', '08 2019', '09 2019', '10 2019', '11 2019','12 2019' ]})
dates.head()

#Put together min max and month
table = pd.concat([interval, dates.reindex(interval.index)], axis=1)

#Convert the month column to datetime and set the index of the Month  --> OUR DATA
table['MONTH']=pd.to_datetime(table['MONTH'])
table.set_index('MONTH',inplace=True) 

#Plotting predicted values and real values from 2019
plt.figure(figsize=(8,5))
plt.plot(prediction2019,label="predicted trend")
plt.plot(data2019,label="Real trend")
plt.plot(table, label="Prediction interval", color='red')
plt.legend(loc = 'Left corner')
plt.title("RESIDENTIAL BURGLARIES FROM 2015 TO 2019 IN LONDON")
plt.xlabel("Time")
plt.ylabel("Residential burglary's values")
plt.show()

#calculate rmse
from math import sqrt
from sklearn.metrics import mean_squared_error

rms = sqrt(mean_squared_error(, prediction2019))
print(rms)

#Understanding RSME
https://machinelearningmastery.com/time-series-forecasting-performance-measures-with-python/
https://stackoverflow.com/questions/45626209/how-to-find-accuracy-of-arima-model


There are three primary metrics used to evaluate linear models. 
MAE: The easiest to understand. Represents average error
These error values are in the squared units of the original units of the predicted values. A mean absolute error of zero indicates no error.
MSE: Similar to MAE but noise is exaggerated and larger errors are “punished”. It is harder to interpret than MAE as it’s not in base units, however, it is generally more popular.
These error values are in the original units of the predicted values. A mean absolute error of zero indicates no error.
RMSE: Most popular metric, similar to MSE, however, the result is square rooted to make it more interpretable as it’s in base units. It is recommended that RMSE be used as the primary metric to interpret your model.
The RMES error values are in the same units as the predictions. As with the mean squared error, an RMSE of zero indicates no error.

All of them require two lists as parameters, with one being your predicted values and the other being the true values

#import metrics library 
From skylearn import metrics 

#print results of MAE 
print (metrics.mean__absolute_error(y_test, y_pred)

#print resulto f MSE
print (metrics.mean__squared_error(y_test, y_pred)
#print results of RMSE 
print (np.sqrt(metrics.mean__squared_error(y_test, y_pred))
