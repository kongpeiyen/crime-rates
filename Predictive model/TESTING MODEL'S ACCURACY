# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')

#Installing pmdarima package
get_ipython().system(' pip install pmdarima')

# Importing auto_arima 
from pmdarima.arima import auto_arima

#Read the crime dataset 
rape_accuracy = rape.head(145)
rape_accuracy.head()

#Spliting the dataset into train and test 
train = rape_accuracy['200801': '201901']
test = rape_accuracy['201901':] 

#Building ARIMA model 
arima_model =  auto_arima(train,start_p=0, d=1, start_q=0, 
                          max_p=5, max_d=5, max_q=5, start_P=0, 
                          D=1, start_Q=0, max_P=5, max_D=5,
                          max_Q=5, m=12, seasonal=True, 
                          error_action='warn',trace = True,
                          supress_warnings=True,stepwise = True,
                          random_state=20,n_fits = 50 )
arima_model.summary()

#Finding predicted crime values
prediction2019 = pd.DataFrame(arima_model.predict(n_periods = 12),index=test.index)
prediction2019.columns = ['predicted_rape']
prediction2019

#Finding prediction interval as a dataframe
conf_int2019 = arima_model.predict(12,return_conf_int=True,alpha=0.05)
interval2019 = pd.DataFrame(conf_int2019[1], columns = ['min','max'])
interval2019

#Create month column
import pandas as pd
dates2019 = pd.DataFrame({'MONTH':['201901','201901','202003','201904','201905','201906','201907', '201908', '201909', '201910', '201911', '201912']})
dates2019.head()

#Put together min max and month
table2019 = pd.concat([dates2019, interval2019], axis=1)
table2019

#Convert the month column to datetime and set the index of the Month 
table2019.set_index('MONTH',inplace=True) 

#write values as lists
import pandas as pd
prediction2019_list = prediction2019['predicted_rape'].values.tolist()
rape_short = rape_accuracy.tail(12)
rape_list = rape_short['Rape'].values.tolist()

#calculate rmse
from math import sqrt
from sklearn.metrics import mean_squared_error
rms = sqrt(mean_squared_error(rape_list, prediction2019_list))
print(rms)

#calculate mean absolute error
from math import sqrt
from sklearn.metrics import mean_absolute_error
mae = sqrt(mean_absolute_error(rape_list, prediction2019_list))
print(mae)

#calculate mean absolute percentage error
import numpy as np
def mean_absolute_percentage_error(rape_list, prediction2019_list): 
    rape_list, prediction2019_list = np.array(rape_list), np.array(prediction2019_list)
    return np.mean(np.abs((rape_list - prediction2019_list) / rape_list)) * 100

mean_absolute_percentage_error(rape_list, prediction2019_list)

#Understanding RSME
https://machinelearningmastery.com/time-series-forecasting-performance-measures-with-python/
https://stackoverflow.com/questions/45626209/how-to-find-accuracy-of-arima-model


There are three primary metrics used to evaluate linear models. 
MAE: The easiest to understand. Represents average error
These error values are in the squared units of the original units of the predicted values. A mean absolute error of zero indicates no error.
MSE: Similar to MAE but noise is exaggerated and larger errors are “punished”. It is harder to interpret than MAE as it’s not in base units, however, it is generally more popular.
These error values are in the original units of the predicted values. A mean absolute error of zero indicates no error.
RMSE: Most popular metric, similar to MSE, however, the result is square rooted to make it more interpretable as it’s in base units. It is recommended that RMSE be used as the primary metric to interpret your model.
The RMES error values are in the same units as the predictions. As with the mean squared error, an RMSE of zero indicates no error.

All of them require two lists as parameters, with one being your predicted values and the other being the true values

